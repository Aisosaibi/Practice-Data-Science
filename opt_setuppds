import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from collections import defaultdict
from statsmodels.nonparametric.smoothers_lowess import lowess

class FixedWidthVariables:
    """
    A class to handle fixed-width file parsing using metadata.
    """
    def __init__(self, spec):
        self.spec = spec
        self.colspecs = [(v['start'] - 1, v['end']) for v in spec.values()]
        self.names = list(spec.keys())

    def read_fwf(self, filename):
        """Reads a fixed-width file into a Pandas DataFrame."""
        return pd.read_fwf(filename, colspecs=self.colspecs, names=self.names)


def read_stata_dict(dict_file):
    """Parses a Stata dictionary file and returns a metadata dictionary."""
    spec = {}
    with open(dict_file, 'r') as f:
        for line in f:
            parts = line.split()
            if len(parts) < 4 or not parts[1].isdigit():
                continue
            name, start, end = parts[0], int(parts[1]), int(parts[2])
            spec[name] = {'start': start, 'end': end}
    return spec


def read_stata(dict_file, data_file):
    """Reads a Stata dictionary file and corresponding data file."""
    spec = read_stata_dict(dict_file)
    fw = FixedWidthVariables(spec)
    return fw.read_fwf(data_file)


def sample_rows(df, n):
    """Returns a random sample of n rows from a DataFrame."""
    return df.sample(n=min(n, len(df)), replace=False)


def resample_rows(df, n):
    """Resamples n rows with replacement."""
    return df.sample(n, replace=True)


def resample_rows_weighted(df, weights, n):
    """Resamples n rows with given probability weights."""
    return df.sample(n, replace=True, weights=weights)


def resample_by_year(df, year_column):
    """Resamples each year separately in a DataFrame."""
    return df.groupby(year_column, group_keys=False).apply(lambda x: resample_rows(x, len(x)))


def fill_missing(df, column):
    """Fills missing values in a column with random samples from available data."""
    non_null_values = df[column].dropna()
    df[column] = df[column].apply(lambda x: np.random.choice(non_null_values) if pd.isnull(x) else x)
    return df


def round_into_bins(series, bins):
    """Rounds a series into specified bins."""
    return pd.cut(series, bins, labels=False, include_lowest=True)


def decorate(title=None, xlabel=None, ylabel=None):
    """Adds labels and titles to a plot."""
    if title: plt.title(title)
    if xlabel: plt.xlabel(xlabel)
    if ylabel: plt.ylabel(ylabel)
    plt.grid(True)


def legend():
    """Displays a legend if any handles exist."""
    if plt.gca().get_legend_handles_labels()[0]:
        plt.legend()


def make_lowess(xs, ys, frac=0.3):
    """Returns smoothed values using LOWESS regression."""
    return lowess(ys, xs, frac=frac, return_sorted=False)


def plot_lowess(xs, ys, frac=0.3, label='LOWESS', color='red'):
    """Plots LOWESS-smoothed data over raw data points."""
    plt.scatter(xs, ys, alpha=0.5, label='Data')
    smoothed = make_lowess(xs, ys, frac)
    plt.plot(xs, smoothed, color=color, label=label)
    legend()
    decorate()


def plot_series_lowess(series, frac=0.3):
    """Plots a time series with LOWESS smoothing."""
    xs = np.arange(len(series))
    plt.plot(xs, series, label='Raw Data', alpha=0.5)
    smoothed = make_lowess(xs, series, frac)
    plt.plot(xs, smoothed, color='red', label='LOWESS')
    legend()
    decorate()
